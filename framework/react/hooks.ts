import type { ComponentType } from 'https://esm.sh/react'
import { createElement, useContext, useMemo } from 'https://esm.sh/react'
import type { RouterURL } from '../../types.ts'
import events from '../core/events.ts'
import { RouterContext } from './context.ts'
import { AsyncUseDenoError } from './error.ts'

/**
 * `useRouter` allows you to use `RouterURL` obeject of routing
 *
 * ```javascript
 * export default function App() {
 *   const { locale, pathname, pagePath, params, query } = useRouter()
 *   return <p>{pathname}</p>
 * }
 * ```
 */
export function useRouter(): RouterURL {
    return useContext(RouterContext)
}

/**
 * `withRouter` allows you to use `useRouter` hook with class component.
 *
 * ```javascript
 * class MyComponent extends React.Component {
 *   render() {
 *     return <p>{this.props.version.deno}</p>
 *   }
 * }
 * export default withRouter(MyComponent)
 * ```
 */
export function withRouter<P>(Component: ComponentType<P>) {
    return function WithRouter(props: P) {
        const router = useRouter()
        return createElement(Component, { ...props, ...router })
    }
}

/**
 * `useDeno` allows you to use Deno runtime in build time(SSR).
 *
 * ```javascript
 * export default function App() {
 *   const version = useDeno(() => Deno.version)
 *   return <p>{version.deno}</p>
 * }
 * ```
 */
export function useDeno<T = any>(callback: () => (T | Promise<T>)): T {
    const id = arguments[1] // generated by compiler
    const { pathname } = useRouter()
    return useMemo(() => {
        const global = window as any
        const useDenoUrl = `useDeno://${pathname}`
        const { [`__asyncData_${useDenoUrl}`]: asyncData } = global
        const key = `${useDenoUrl}#${id}`
        if (asyncData && key in asyncData) {
            return asyncData[key]
        } else if (typeof Deno !== 'undefined' && Deno.version.deno) {
            const ret = callback()
            if (ret instanceof Promise) {
                events.emit(useDenoUrl, id, ret.then(data => {
                    if (asyncData) {
                        asyncData[key] = data
                    }
                    events.emit(useDenoUrl, id, data)
                }), true)
                throw new AsyncUseDenoError('async useDeno')
            } else {
                if (asyncData) {
                    asyncData[key] = ret
                }
                events.emit(useDenoUrl, id, ret)
                return ret
            }
        }
        return global[key] || null
    }, [pathname])
}

/**
 * `withDeno` allows you to use `useDeno` hook with class component.
 *
 * ```javascript
 * class MyComponent extends React.Component {
 *   render() {
 *     return <p>{this.props.version.deno}</p>
 *   }
 * }
 * export default withDeno(() => Deno.version)(MyComponent)
 * ```
 */
export function withDeno<T>(callback: () => (T | Promise<T>)) {
    return function <P extends T>(Component: ComponentType<P>): ComponentType<Exclude<P, keyof T>> {
        return function WithDeno(props: Exclude<P, keyof T>) {
            const denoProps = useDeno(callback)
            if (typeof denoProps === 'object') {
                return createElement(Component, { ...props, ...denoProps })
            }
            return createElement(Component, props)
        }
    }
}
